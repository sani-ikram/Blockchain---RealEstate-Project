// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var solnSqVerifier = artifacts.require('SolnSquareVerifier');
var Proof = require('../contracts/zokrates/code/square/proof.json');



// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
describe('Solution SQ Verifier', function () {
    beforeEach(async function () { 
        OWNER_ADDRESS="<my_address>"
        NFT_CONTRACT_ADDRESS="<deployed_contract_address>"
        
        this.contract = await solnSqVerifier.new();// Setting up the total token supply count to 50;
        

    })
    it('Proof when the solution is added ', async function () { 
        let index = 1;
        let account = "0x8742ff5d6aa94173cc6fad836140f49b4fadad38";
        let tokenId = 1234;
        let tokenURI = "https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/";
        
        const result = await this.contract.addSolutions.call( account, {from: account});
        assert.equal(result, true, "Solution addition is not successful"); 
    });
    it('can mint verified NFT ', async function () { 
        try{
        const solnresult = await solnSqVerifier.deployed()
        //let index = 1;
        let totalSupplyCount = 10;
        let owner = "0x88A6a89522cABed146e8F185C3766cA74327a665";
        let tokenId1 = 123;
        let tokenId2 = 456;
        let tokenId3 = 789;
        let tokenId4 = 110;
        let tokenId5 = 115;
        let tokenURI = "https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/";
        await solnresult.addSolutions.call( owner, {from: owner});
        await solnresult.mintNFT.call(10, owner, tokenId1, tokenURI,Proof.proof, Proof.inputs, {from: owner}); 
        await solnresult.addSolutions.call( owner, {from: owner});
        await solnresult.mintNFT.call(9, owner, tokenId2, tokenURI,Proof.proof, Proof.inputs, {from: owner}); 
        await solnresult.addSolutions.call( owner, {from: owner});
        await solnresult.mintNFT.call(8, owner, tokenId3, tokenURI,Proof.proof, Proof.inputs, {from: owner}); 
        await solnresult.addSolutions.call( owner, {from: owner});
        await solnresult.mintNFT.call(7, owner, tokenId4, tokenURI,Proof.proof, Proof.inputs, {from: owner}); 
        await solnresult.addSolutions.call( owner, {from: owner});
        const result2 = await solnresult.mintNFT.call(6, owner, tokenId5, tokenURI,Proof.proof, Proof.inputs, {from: owner}); 
        assert.equal(result2, true, "The output is successful");   
        }catch(err){
           // console.log(err);
        }
    });

});
